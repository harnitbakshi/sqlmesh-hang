2025-05-13 06:46:27,435 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:27,476 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: SELECT 1 FROM "information_schema"."tables" WHERE "table_name" = '_versions' AND "table_schema" = 'sqlmesh' (base.py:2152)
2025-05-13 06:46:27,481 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:27,485 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: SELECT * FROM "sqlmesh"."_versions" (base.py:2152)
2025-05-13 06:46:27,488 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:27,491 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: SELECT 1 FROM "information_schema"."tables" WHERE "table_name" = '_versions' AND "table_schema" = 'sqlmesh' (base.py:2152)
2025-05-13 06:46:27,494 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:27,496 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: SELECT * FROM "sqlmesh"."_versions" (base.py:2152)
2025-05-13 06:46:27,549 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:27,554 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: SELECT "name", "identifier", "updated_ts", "unpaused_ts", "unrestorable", "next_auto_restatement_ts" FROM "sqlmesh"."_snapshots" AS "snapshots" LEFT JOIN "sqlmesh"."_auto_restatements" AS "auto_restatements" ON "snapshots"."name" = "auto_restatements"."snapshot_name" AND "snapshots"."version" = "auto_restatements"."snapshot_version" WHERE ("name", "identifier") IN (('"tradesdb"."sqlmesh_example"."incremental_model"', '2011567800')) (base.py:2152)
2025-05-13 06:46:27,558 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:27,561 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: SELECT "start_at", "gateway_managed", "snapshots", "previous_finalized_snapshots", "end_at", "plan_id", "normalize_name", "catalog_name_override", "name", "suffix_target", "expiration_ts", "previous_plan_id", "finalized_ts", "requirements", "promoted_snapshot_ids" FROM "sqlmesh"."_environments" WHERE "name" = 'prod' (base.py:2152)
2025-05-13 06:46:27,564 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:27,567 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: SELECT "start_at", "gateway_managed", "snapshots", "previous_finalized_snapshots", "end_at", "plan_id", "normalize_name", "catalog_name_override", "name", "suffix_target", "expiration_ts", "previous_plan_id", "finalized_ts", "requirements", "promoted_snapshot_ids" FROM "sqlmesh"."_environments" WHERE "name" = 'prod' (base.py:2152)
2025-05-13 06:46:27,785 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:27,789 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: SELECT "environment_statements" FROM "sqlmesh"."_environment_statements" WHERE "environment_name" = 'prod' (base.py:2152)
2025-05-13 06:46:27,792 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:27,795 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: SELECT "start_at", "gateway_managed", "snapshots", "previous_finalized_snapshots", "end_at", "plan_id", "normalize_name", "catalog_name_override", "name", "suffix_target", "expiration_ts", "previous_plan_id", "finalized_ts", "requirements", "promoted_snapshot_ids" FROM "sqlmesh"."_environments" WHERE "name" = 'prod' (base.py:2152)
2025-05-13 06:46:30,745 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:30,748 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: SELECT "name", "identifier" FROM "sqlmesh"."_snapshots" WHERE ("name", "identifier") IN (('"tradesdb"."sqlmesh_example"."incremental_model"', '2011567800')) (base.py:2152)
2025-05-13 06:46:30,760 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_snapshots" ("name", "identifier", "version", "snapshot", "kind_name", "updated_ts", "unpaused_ts", "ttl_ms", "unrestorable") SELECT CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("snapshot" AS TEXT) AS "snapshot", CAST("kind_name" AS TEXT) AS "kind_name", CAST("updated_ts" AS BIGINT) AS "updated_ts", CAST("unpaused_ts" AS BIGINT) AS "unpaused_ts", CAST("ttl_ms" AS BIGINT) AS "ttl_ms", CAST("unrestorable" AS BOOLEAN) AS "unrestorable" FROM (VALUES "<REDACTED VALUES>") AS "t"("name", "identifier", "version", "snapshot", "kind_name", "updated_ts", "unpaused_ts", "ttl_ms", "unrestorable") (base.py:2152)
2025-05-13 06:46:30,765 - ThreadPoolExecutor-1_0 - sqlmesh.core.snapshot.evaluator - INFO - Listing data objects in schema tradesdb.sqlmesh__sqlmesh_example (evaluator.py:349)
2025-05-13 06:46:30,784 - ThreadPoolExecutor-1_0 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT current_catalog (base.py:2152)
2025-05-13 06:46:30,791 - ThreadPoolExecutor-1_0 - sqlmesh.core.engine_adapter.mixins - DEBUG - Executing SQL:
SELECT * FROM (SELECT schemaname AS schema_name, tablename AS name, 'TABLE' AS type FROM pg_tables UNION ALL SELECT schemaname AS schema_name, viewname AS name, 'VIEW' AS type FROM pg_views UNION ALL SELECT schemaname AS schema_name, matviewname AS name, 'MATERIALIZED_VIEW' AS type FROM pg_matviews) AS objs WHERE schema_name = 'sqlmesh__sqlmesh_example' AND name IN ('sqlmesh_example__incremental_model__4074472748') (mixins.py:61)
2025-05-13 06:46:30,803 - MainThread - sqlmesh.core.snapshot.evaluator - INFO - Creating schema 'tradesdb.sqlmesh__sqlmesh_example' (evaluator.py:1122)
2025-05-13 06:46:30,820 - MainThread - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE SCHEMA IF NOT EXISTS "sqlmesh__sqlmesh_example" (base.py:2152)
2025-05-13 06:46:30,867 - ThreadPoolExecutor-2_0 - sqlmesh.core.snapshot.evaluator - INFO - Creating table 'tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:1474)
2025-05-13 06:46:30,871 - ThreadPoolExecutor-2_0 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: CREATE TABLE IF NOT EXISTS "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" AS SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE ("th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE ("th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND FALSE) AND "th"."db_timestamp" BETWEEN '1970-01-01 00:00:00' AND '1970-01-01 23:59:59.999999') AND FALSE) AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE ("th2"."db_timestamp" BETWEEN '1970-01-01 00:00:00' AND '1970-01-01 23:59:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc") AND FALSE) AND FALSE) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE ("oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id" AND FALSE) AND "oh"."db_timestamp" BETWEEN '1970-01-01 00:00:00' AND '1970-01-01 23:59:59.999999') AND FALSE) AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '1970-01-01 00:00:00' AND '1970-01-01 23:59:59.999999' AND FALSE LIMIT 0 (base.py:2152)
2025-05-13 06:46:30,884 - ThreadPoolExecutor-2_0 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: ALTER TABLE "tradesdb"."sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ADD PRIMARY KEY ("source", "db_timestamp", "order_id", "trade_id", "exchange_order_id", "exchange_trade_id") (base.py:2152)
2025-05-13 06:46:30,895 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:30,898 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: SELECT "id", "intervals"."name", "intervals"."identifier", "intervals"."version", "intervals"."dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_pending_restatement" FROM "sqlmesh"."_intervals" AS "intervals" WHERE ("intervals"."name", "intervals"."version") IN (('"tradesdb"."sqlmesh_example"."incremental_model"', '4074472748')) ORDER BY "intervals"."name", "intervals"."version", "created_ts" NULLS FIRST, "is_removed" NULLS FIRST, "is_pending_restatement" NULLS FIRST (base.py:2152)
2025-05-13 06:46:30,903 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:30,906 - MainThread - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: SELECT "id", "intervals"."name", "intervals"."identifier", "intervals"."version", "intervals"."dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_pending_restatement" FROM "sqlmesh"."_intervals" AS "intervals" WHERE ("intervals"."name", "intervals"."version") IN (('"tradesdb"."sqlmesh_example"."incremental_model"', '4074472748')) ORDER BY "intervals"."name", "intervals"."version", "created_ts" NULLS FIRST, "is_removed" NULLS FIRST, "is_pending_restatement" NULLS FIRST (base.py:2152)
2025-05-13 06:46:31,097 - ThreadPoolExecutor-3_0 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:31,139 - ThreadPoolExecutor-3_0 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 00:00:00, 2025-03-03 00:05:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:31,143 - ThreadPoolExecutor-3_0 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:31,151 - ThreadPoolExecutor-3_0 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:00:00' AS TIMESTAMP) AND CAST('2025-03-03 00:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,158 - ThreadPoolExecutor-3_0 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 00:00:00' AND '2025-03-03 00:04:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 00:00:00' AND '2025-03-03 00:04:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 00:00:00' AND '2025-03-03 00:04:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 00:00:00' AND '2025-03-03 00:04:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:00:00' AS TIMESTAMP) AND CAST('2025-03-03 00:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,258 - ThreadPoolExecutor-3_0 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:31,278 - ThreadPoolExecutor-3_0 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 00:00:00, 2025-03-03 00:05:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:31,278 - ThreadPoolExecutor-3_0 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:31,284 - ThreadPoolExecutor-3_0 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:31,294 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:31,338 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 00:05:00, 2025-03-03 00:10:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:31,343 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:31,353 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:05:00' AS TIMESTAMP) AND CAST('2025-03-03 00:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,360 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 00:05:00' AND '2025-03-03 00:09:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 00:05:00' AND '2025-03-03 00:09:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 00:05:00' AND '2025-03-03 00:09:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 00:05:00' AND '2025-03-03 00:09:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:05:00' AS TIMESTAMP) AND CAST('2025-03-03 00:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,371 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:31,391 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 00:05:00, 2025-03-03 00:10:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:31,391 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:31,396 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:31,407 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:31,427 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 00:10:00, 2025-03-03 00:15:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:31,432 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:31,438 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:10:00' AS TIMESTAMP) AND CAST('2025-03-03 00:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,446 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 00:10:00' AND '2025-03-03 00:14:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 00:10:00' AND '2025-03-03 00:14:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 00:10:00' AND '2025-03-03 00:14:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 00:10:00' AND '2025-03-03 00:14:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:10:00' AS TIMESTAMP) AND CAST('2025-03-03 00:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,454 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:31,457 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 00:10:00, 2025-03-03 00:15:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:31,457 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:31,462 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:31,472 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:31,493 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 00:15:00, 2025-03-03 00:20:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:31,498 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:31,504 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:15:00' AS TIMESTAMP) AND CAST('2025-03-03 00:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,511 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 00:15:00' AND '2025-03-03 00:19:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 00:15:00' AND '2025-03-03 00:19:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 00:15:00' AND '2025-03-03 00:19:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 00:15:00' AND '2025-03-03 00:19:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:15:00' AS TIMESTAMP) AND CAST('2025-03-03 00:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,520 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:31,523 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 00:15:00, 2025-03-03 00:20:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:31,523 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:31,529 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:31,538 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:31,557 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 00:20:00, 2025-03-03 00:25:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:31,564 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:31,571 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:20:00' AS TIMESTAMP) AND CAST('2025-03-03 00:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,578 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 00:20:00' AND '2025-03-03 00:24:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 00:20:00' AND '2025-03-03 00:24:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 00:20:00' AND '2025-03-03 00:24:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 00:20:00' AND '2025-03-03 00:24:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:20:00' AS TIMESTAMP) AND CAST('2025-03-03 00:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,586 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:31,589 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 00:20:00, 2025-03-03 00:25:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:31,589 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:31,594 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:31,604 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:31,615 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:46:31,636 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 00:25:00, 2025-03-03 00:30:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:31,641 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:31,661 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:25:00' AS TIMESTAMP) AND CAST('2025-03-03 00:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,671 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 00:25:00' AND '2025-03-03 00:29:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 00:25:00' AND '2025-03-03 00:29:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 00:25:00' AND '2025-03-03 00:29:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 00:25:00' AND '2025-03-03 00:29:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:25:00' AS TIMESTAMP) AND CAST('2025-03-03 00:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,673 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:46:31,674 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12a2bd350>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:46:31,681 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:31,684 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 00:25:00, 2025-03-03 00:30:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:31,684 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:31,690 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:31,704 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:31,726 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 00:30:00, 2025-03-03 00:35:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:31,732 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:31,741 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:30:00' AS TIMESTAMP) AND CAST('2025-03-03 00:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,749 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 00:30:00' AND '2025-03-03 00:34:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 00:30:00' AND '2025-03-03 00:34:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 00:30:00' AND '2025-03-03 00:34:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 00:30:00' AND '2025-03-03 00:34:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:30:00' AS TIMESTAMP) AND CAST('2025-03-03 00:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,757 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:31,761 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 00:30:00, 2025-03-03 00:35:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:31,761 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:31,770 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:31,780 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:31,801 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 00:35:00, 2025-03-03 00:40:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:31,806 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:31,813 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:35:00' AS TIMESTAMP) AND CAST('2025-03-03 00:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,821 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 00:35:00' AND '2025-03-03 00:39:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 00:35:00' AND '2025-03-03 00:39:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 00:35:00' AND '2025-03-03 00:39:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 00:35:00' AND '2025-03-03 00:39:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:35:00' AS TIMESTAMP) AND CAST('2025-03-03 00:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,829 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:31,832 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 00:35:00, 2025-03-03 00:40:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:31,832 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:31,837 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:31,847 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:31,869 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 00:40:00, 2025-03-03 00:45:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:31,874 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:31,882 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:40:00' AS TIMESTAMP) AND CAST('2025-03-03 00:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,889 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 00:40:00' AND '2025-03-03 00:44:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 00:40:00' AND '2025-03-03 00:44:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 00:40:00' AND '2025-03-03 00:44:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 00:40:00' AND '2025-03-03 00:44:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:40:00' AS TIMESTAMP) AND CAST('2025-03-03 00:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,897 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:31,900 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 00:40:00, 2025-03-03 00:45:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:31,900 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:31,906 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:31,915 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:31,937 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 00:45:00, 2025-03-03 00:50:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:31,943 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:31,951 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:45:00' AS TIMESTAMP) AND CAST('2025-03-03 00:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,958 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 00:45:00' AND '2025-03-03 00:49:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 00:45:00' AND '2025-03-03 00:49:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 00:45:00' AND '2025-03-03 00:49:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 00:45:00' AND '2025-03-03 00:49:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:45:00' AS TIMESTAMP) AND CAST('2025-03-03 00:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:31,965 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:31,968 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 00:45:00, 2025-03-03 00:50:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:31,968 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:31,974 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:31,983 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,005 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 00:50:00, 2025-03-03 00:55:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,010 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,019 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:50:00' AS TIMESTAMP) AND CAST('2025-03-03 00:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,028 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 00:50:00' AND '2025-03-03 00:54:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 00:50:00' AND '2025-03-03 00:54:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 00:50:00' AND '2025-03-03 00:54:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 00:50:00' AND '2025-03-03 00:54:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:50:00' AS TIMESTAMP) AND CAST('2025-03-03 00:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,037 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,040 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 00:50:00, 2025-03-03 00:55:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,040 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,046 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,056 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,077 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 00:55:00, 2025-03-03 01:00:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,081 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,088 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:55:00' AS TIMESTAMP) AND CAST('2025-03-03 00:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,096 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 00:55:00' AND '2025-03-03 00:59:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 00:55:00' AND '2025-03-03 00:59:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 00:55:00' AND '2025-03-03 00:59:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 00:55:00' AND '2025-03-03 00:59:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 00:55:00' AS TIMESTAMP) AND CAST('2025-03-03 00:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,104 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,107 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 00:55:00, 2025-03-03 01:00:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,107 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,115 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,125 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,145 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 01:00:00, 2025-03-03 01:05:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,150 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,158 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:00:00' AS TIMESTAMP) AND CAST('2025-03-03 01:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,165 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 01:00:00' AND '2025-03-03 01:04:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 01:00:00' AND '2025-03-03 01:04:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 01:00:00' AND '2025-03-03 01:04:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 01:00:00' AND '2025-03-03 01:04:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:00:00' AS TIMESTAMP) AND CAST('2025-03-03 01:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,172 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,175 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 01:00:00, 2025-03-03 01:05:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,175 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,181 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,190 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,214 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 01:05:00, 2025-03-03 01:10:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,219 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,226 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:05:00' AS TIMESTAMP) AND CAST('2025-03-03 01:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,233 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 01:05:00' AND '2025-03-03 01:09:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 01:05:00' AND '2025-03-03 01:09:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 01:05:00' AND '2025-03-03 01:09:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 01:05:00' AND '2025-03-03 01:09:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:05:00' AS TIMESTAMP) AND CAST('2025-03-03 01:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,240 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,243 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 01:05:00, 2025-03-03 01:10:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,243 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,249 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,258 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,279 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 01:10:00, 2025-03-03 01:15:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,287 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,294 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:10:00' AS TIMESTAMP) AND CAST('2025-03-03 01:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,301 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 01:10:00' AND '2025-03-03 01:14:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 01:10:00' AND '2025-03-03 01:14:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 01:10:00' AND '2025-03-03 01:14:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 01:10:00' AND '2025-03-03 01:14:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:10:00' AS TIMESTAMP) AND CAST('2025-03-03 01:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,308 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,311 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 01:10:00, 2025-03-03 01:15:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,311 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,317 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,327 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,350 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 01:15:00, 2025-03-03 01:20:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,355 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,364 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:15:00' AS TIMESTAMP) AND CAST('2025-03-03 01:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,373 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 01:15:00' AND '2025-03-03 01:19:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 01:15:00' AND '2025-03-03 01:19:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 01:15:00' AND '2025-03-03 01:19:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 01:15:00' AND '2025-03-03 01:19:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:15:00' AS TIMESTAMP) AND CAST('2025-03-03 01:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,382 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,386 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 01:15:00, 2025-03-03 01:20:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,386 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,392 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,401 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,421 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 01:20:00, 2025-03-03 01:25:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,426 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,433 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:20:00' AS TIMESTAMP) AND CAST('2025-03-03 01:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,440 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 01:20:00' AND '2025-03-03 01:24:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 01:20:00' AND '2025-03-03 01:24:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 01:20:00' AND '2025-03-03 01:24:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 01:20:00' AND '2025-03-03 01:24:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:20:00' AS TIMESTAMP) AND CAST('2025-03-03 01:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,448 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,452 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 01:20:00, 2025-03-03 01:25:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,452 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,460 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,470 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,492 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 01:25:00, 2025-03-03 01:30:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,498 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,506 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:25:00' AS TIMESTAMP) AND CAST('2025-03-03 01:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,513 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 01:25:00' AND '2025-03-03 01:29:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 01:25:00' AND '2025-03-03 01:29:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 01:25:00' AND '2025-03-03 01:29:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 01:25:00' AND '2025-03-03 01:29:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:25:00' AS TIMESTAMP) AND CAST('2025-03-03 01:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,523 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,527 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 01:25:00, 2025-03-03 01:30:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,528 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,533 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,543 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,565 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 01:30:00, 2025-03-03 01:35:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,571 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,578 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:30:00' AS TIMESTAMP) AND CAST('2025-03-03 01:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,586 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 01:30:00' AND '2025-03-03 01:34:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 01:30:00' AND '2025-03-03 01:34:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 01:30:00' AND '2025-03-03 01:34:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 01:30:00' AND '2025-03-03 01:34:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:30:00' AS TIMESTAMP) AND CAST('2025-03-03 01:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,594 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,597 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 01:30:00, 2025-03-03 01:35:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,597 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,604 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,615 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,638 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 01:35:00, 2025-03-03 01:40:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,643 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,651 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:35:00' AS TIMESTAMP) AND CAST('2025-03-03 01:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,663 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 01:35:00' AND '2025-03-03 01:39:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 01:35:00' AND '2025-03-03 01:39:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 01:35:00' AND '2025-03-03 01:39:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 01:35:00' AND '2025-03-03 01:39:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:35:00' AS TIMESTAMP) AND CAST('2025-03-03 01:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,674 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,677 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 01:35:00, 2025-03-03 01:40:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,678 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,683 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,694 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,715 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 01:40:00, 2025-03-03 01:45:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,722 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,728 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:40:00' AS TIMESTAMP) AND CAST('2025-03-03 01:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,739 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 01:40:00' AND '2025-03-03 01:44:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 01:40:00' AND '2025-03-03 01:44:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 01:40:00' AND '2025-03-03 01:44:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 01:40:00' AND '2025-03-03 01:44:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:40:00' AS TIMESTAMP) AND CAST('2025-03-03 01:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,746 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,749 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 01:40:00, 2025-03-03 01:45:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,750 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,755 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,765 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,785 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 01:45:00, 2025-03-03 01:50:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,790 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,797 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:45:00' AS TIMESTAMP) AND CAST('2025-03-03 01:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,806 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 01:45:00' AND '2025-03-03 01:49:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 01:45:00' AND '2025-03-03 01:49:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 01:45:00' AND '2025-03-03 01:49:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 01:45:00' AND '2025-03-03 01:49:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:45:00' AS TIMESTAMP) AND CAST('2025-03-03 01:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,813 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,816 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 01:45:00, 2025-03-03 01:50:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,816 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,822 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,831 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,855 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 01:50:00, 2025-03-03 01:55:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,859 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,866 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:50:00' AS TIMESTAMP) AND CAST('2025-03-03 01:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,875 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 01:50:00' AND '2025-03-03 01:54:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 01:50:00' AND '2025-03-03 01:54:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 01:50:00' AND '2025-03-03 01:54:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 01:50:00' AND '2025-03-03 01:54:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:50:00' AS TIMESTAMP) AND CAST('2025-03-03 01:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,882 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,886 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 01:50:00, 2025-03-03 01:55:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,886 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,891 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,901 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,926 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 01:55:00, 2025-03-03 02:00:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:32,930 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:32,937 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:55:00' AS TIMESTAMP) AND CAST('2025-03-03 01:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,944 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 01:55:00' AND '2025-03-03 01:59:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 01:55:00' AND '2025-03-03 01:59:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 01:55:00' AND '2025-03-03 01:59:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 01:55:00' AND '2025-03-03 01:59:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 01:55:00' AS TIMESTAMP) AND CAST('2025-03-03 01:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:32,953 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:32,956 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 01:55:00, 2025-03-03 02:00:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:32,956 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:32,962 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:32,976 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:32,999 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 02:00:00, 2025-03-03 02:05:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:33,003 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:33,012 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:00:00' AS TIMESTAMP) AND CAST('2025-03-03 02:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,021 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 02:00:00' AND '2025-03-03 02:04:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 02:00:00' AND '2025-03-03 02:04:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 02:00:00' AND '2025-03-03 02:04:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 02:00:00' AND '2025-03-03 02:04:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:00:00' AS TIMESTAMP) AND CAST('2025-03-03 02:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,031 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:33,038 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 02:00:00, 2025-03-03 02:05:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:33,038 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:33,046 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:33,061 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:33,086 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 02:05:00, 2025-03-03 02:10:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:33,091 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:33,099 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:05:00' AS TIMESTAMP) AND CAST('2025-03-03 02:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,109 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 02:05:00' AND '2025-03-03 02:09:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 02:05:00' AND '2025-03-03 02:09:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 02:05:00' AND '2025-03-03 02:09:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 02:05:00' AND '2025-03-03 02:09:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:05:00' AS TIMESTAMP) AND CAST('2025-03-03 02:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,121 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:33,125 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 02:05:00, 2025-03-03 02:10:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:33,125 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:33,132 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:33,144 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:33,168 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 02:10:00, 2025-03-03 02:15:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:33,174 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:33,182 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:10:00' AS TIMESTAMP) AND CAST('2025-03-03 02:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,190 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 02:10:00' AND '2025-03-03 02:14:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 02:10:00' AND '2025-03-03 02:14:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 02:10:00' AND '2025-03-03 02:14:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 02:10:00' AND '2025-03-03 02:14:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:10:00' AS TIMESTAMP) AND CAST('2025-03-03 02:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,198 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:33,202 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 02:10:00, 2025-03-03 02:15:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:33,202 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:33,207 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:33,217 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:33,241 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 02:15:00, 2025-03-03 02:20:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:33,245 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:33,254 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:15:00' AS TIMESTAMP) AND CAST('2025-03-03 02:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,261 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 02:15:00' AND '2025-03-03 02:19:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 02:15:00' AND '2025-03-03 02:19:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 02:15:00' AND '2025-03-03 02:19:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 02:15:00' AND '2025-03-03 02:19:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:15:00' AS TIMESTAMP) AND CAST('2025-03-03 02:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,269 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:33,272 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 02:15:00, 2025-03-03 02:20:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:33,272 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:33,278 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:33,287 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:33,307 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 02:20:00, 2025-03-03 02:25:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:33,314 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:33,322 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:20:00' AS TIMESTAMP) AND CAST('2025-03-03 02:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,329 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 02:20:00' AND '2025-03-03 02:24:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 02:20:00' AND '2025-03-03 02:24:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 02:20:00' AND '2025-03-03 02:24:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 02:20:00' AND '2025-03-03 02:24:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:20:00' AS TIMESTAMP) AND CAST('2025-03-03 02:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,337 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:33,340 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 02:20:00, 2025-03-03 02:25:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:33,340 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:33,345 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:33,355 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:33,376 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 02:25:00, 2025-03-03 02:30:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:33,381 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:33,389 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:25:00' AS TIMESTAMP) AND CAST('2025-03-03 02:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,398 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 02:25:00' AND '2025-03-03 02:29:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 02:25:00' AND '2025-03-03 02:29:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 02:25:00' AND '2025-03-03 02:29:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 02:25:00' AND '2025-03-03 02:29:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:25:00' AS TIMESTAMP) AND CAST('2025-03-03 02:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,405 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:33,408 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 02:25:00, 2025-03-03 02:30:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:33,408 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:33,414 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:33,424 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:33,446 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 02:30:00, 2025-03-03 02:35:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:33,451 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:33,459 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:30:00' AS TIMESTAMP) AND CAST('2025-03-03 02:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,465 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 02:30:00' AND '2025-03-03 02:34:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 02:30:00' AND '2025-03-03 02:34:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 02:30:00' AND '2025-03-03 02:34:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 02:30:00' AND '2025-03-03 02:34:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:30:00' AS TIMESTAMP) AND CAST('2025-03-03 02:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,472 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:33,475 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 02:30:00, 2025-03-03 02:35:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:33,475 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:33,483 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:33,492 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:33,514 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 02:35:00, 2025-03-03 02:40:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:33,520 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:33,528 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:35:00' AS TIMESTAMP) AND CAST('2025-03-03 02:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,536 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 02:35:00' AND '2025-03-03 02:39:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 02:35:00' AND '2025-03-03 02:39:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 02:35:00' AND '2025-03-03 02:39:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 02:35:00' AND '2025-03-03 02:39:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:35:00' AS TIMESTAMP) AND CAST('2025-03-03 02:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,544 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:33,547 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 02:35:00, 2025-03-03 02:40:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:33,547 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:33,553 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:33,562 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:33,584 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 02:40:00, 2025-03-03 02:45:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:33,589 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:33,596 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:40:00' AS TIMESTAMP) AND CAST('2025-03-03 02:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,604 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 02:40:00' AND '2025-03-03 02:44:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 02:40:00' AND '2025-03-03 02:44:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 02:40:00' AND '2025-03-03 02:44:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 02:40:00' AND '2025-03-03 02:44:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:40:00' AS TIMESTAMP) AND CAST('2025-03-03 02:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,612 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:33,615 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 02:40:00, 2025-03-03 02:45:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:33,615 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:33,620 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:33,631 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:33,653 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 02:45:00, 2025-03-03 02:50:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:33,661 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:33,669 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:45:00' AS TIMESTAMP) AND CAST('2025-03-03 02:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,676 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 02:45:00' AND '2025-03-03 02:49:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 02:45:00' AND '2025-03-03 02:49:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 02:45:00' AND '2025-03-03 02:49:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 02:45:00' AND '2025-03-03 02:49:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:45:00' AS TIMESTAMP) AND CAST('2025-03-03 02:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,684 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:33,687 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 02:45:00, 2025-03-03 02:50:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:33,687 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:33,693 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:33,702 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:33,723 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 02:50:00, 2025-03-03 02:55:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:33,728 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:33,736 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:50:00' AS TIMESTAMP) AND CAST('2025-03-03 02:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,745 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 02:50:00' AND '2025-03-03 02:54:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 02:50:00' AND '2025-03-03 02:54:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 02:50:00' AND '2025-03-03 02:54:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 02:50:00' AND '2025-03-03 02:54:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:50:00' AS TIMESTAMP) AND CAST('2025-03-03 02:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,753 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:33,755 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 02:50:00, 2025-03-03 02:55:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:33,755 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:33,761 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:33,770 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:33,791 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 02:55:00, 2025-03-03 03:00:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:33,795 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:33,802 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:55:00' AS TIMESTAMP) AND CAST('2025-03-03 02:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,809 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 02:55:00' AND '2025-03-03 02:59:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 02:55:00' AND '2025-03-03 02:59:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 02:55:00' AND '2025-03-03 02:59:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 02:55:00' AND '2025-03-03 02:59:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 02:55:00' AS TIMESTAMP) AND CAST('2025-03-03 02:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,816 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:33,818 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 02:55:00, 2025-03-03 03:00:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:33,818 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:33,825 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:33,835 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:33,977 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 03:00:00, 2025-03-03 03:05:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:33,981 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:33,987 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:00:00' AS TIMESTAMP) AND CAST('2025-03-03 03:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:33,994 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 03:00:00' AND '2025-03-03 03:04:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 03:00:00' AND '2025-03-03 03:04:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 03:00:00' AND '2025-03-03 03:04:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 03:00:00' AND '2025-03-03 03:04:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:00:00' AS TIMESTAMP) AND CAST('2025-03-03 03:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,001 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,003 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 03:00:00, 2025-03-03 03:05:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,003 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,009 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,019 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,042 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 03:05:00, 2025-03-03 03:10:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,047 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,054 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:05:00' AS TIMESTAMP) AND CAST('2025-03-03 03:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,062 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 03:05:00' AND '2025-03-03 03:09:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 03:05:00' AND '2025-03-03 03:09:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 03:05:00' AND '2025-03-03 03:09:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 03:05:00' AND '2025-03-03 03:09:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:05:00' AS TIMESTAMP) AND CAST('2025-03-03 03:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,070 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,074 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 03:05:00, 2025-03-03 03:10:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,074 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,079 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,089 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,110 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 03:10:00, 2025-03-03 03:15:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,115 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,123 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:10:00' AS TIMESTAMP) AND CAST('2025-03-03 03:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,133 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 03:10:00' AND '2025-03-03 03:14:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 03:10:00' AND '2025-03-03 03:14:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 03:10:00' AND '2025-03-03 03:14:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 03:10:00' AND '2025-03-03 03:14:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:10:00' AS TIMESTAMP) AND CAST('2025-03-03 03:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,141 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,143 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 03:10:00, 2025-03-03 03:15:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,143 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,149 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,158 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,178 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 03:15:00, 2025-03-03 03:20:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,183 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,191 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:15:00' AS TIMESTAMP) AND CAST('2025-03-03 03:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,198 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 03:15:00' AND '2025-03-03 03:19:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 03:15:00' AND '2025-03-03 03:19:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 03:15:00' AND '2025-03-03 03:19:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 03:15:00' AND '2025-03-03 03:19:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:15:00' AS TIMESTAMP) AND CAST('2025-03-03 03:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,205 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,208 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 03:15:00, 2025-03-03 03:20:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,208 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,216 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,225 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,246 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 03:20:00, 2025-03-03 03:25:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,251 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,258 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:20:00' AS TIMESTAMP) AND CAST('2025-03-03 03:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,265 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 03:20:00' AND '2025-03-03 03:24:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 03:20:00' AND '2025-03-03 03:24:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 03:20:00' AND '2025-03-03 03:24:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 03:20:00' AND '2025-03-03 03:24:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:20:00' AS TIMESTAMP) AND CAST('2025-03-03 03:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,272 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,275 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 03:20:00, 2025-03-03 03:25:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,275 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,281 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,290 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,315 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 03:25:00, 2025-03-03 03:30:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,321 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,330 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:25:00' AS TIMESTAMP) AND CAST('2025-03-03 03:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,337 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 03:25:00' AND '2025-03-03 03:29:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 03:25:00' AND '2025-03-03 03:29:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 03:25:00' AND '2025-03-03 03:29:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 03:25:00' AND '2025-03-03 03:29:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:25:00' AS TIMESTAMP) AND CAST('2025-03-03 03:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,345 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,349 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 03:25:00, 2025-03-03 03:30:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,349 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,356 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,365 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,386 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 03:30:00, 2025-03-03 03:35:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,392 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,400 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:30:00' AS TIMESTAMP) AND CAST('2025-03-03 03:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,408 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 03:30:00' AND '2025-03-03 03:34:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 03:30:00' AND '2025-03-03 03:34:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 03:30:00' AND '2025-03-03 03:34:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 03:30:00' AND '2025-03-03 03:34:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:30:00' AS TIMESTAMP) AND CAST('2025-03-03 03:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,416 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,418 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 03:30:00, 2025-03-03 03:35:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,418 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,424 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,433 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,454 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 03:35:00, 2025-03-03 03:40:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,459 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,465 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:35:00' AS TIMESTAMP) AND CAST('2025-03-03 03:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,476 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 03:35:00' AND '2025-03-03 03:39:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 03:35:00' AND '2025-03-03 03:39:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 03:35:00' AND '2025-03-03 03:39:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 03:35:00' AND '2025-03-03 03:39:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:35:00' AS TIMESTAMP) AND CAST('2025-03-03 03:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,483 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,486 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 03:35:00, 2025-03-03 03:40:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,487 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,492 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,501 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,522 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 03:40:00, 2025-03-03 03:45:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,526 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,534 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:40:00' AS TIMESTAMP) AND CAST('2025-03-03 03:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,542 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 03:40:00' AND '2025-03-03 03:44:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 03:40:00' AND '2025-03-03 03:44:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 03:40:00' AND '2025-03-03 03:44:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 03:40:00' AND '2025-03-03 03:44:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:40:00' AS TIMESTAMP) AND CAST('2025-03-03 03:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,548 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,551 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 03:40:00, 2025-03-03 03:45:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,551 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,558 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,567 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,588 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 03:45:00, 2025-03-03 03:50:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,593 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,600 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:45:00' AS TIMESTAMP) AND CAST('2025-03-03 03:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,606 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 03:45:00' AND '2025-03-03 03:49:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 03:45:00' AND '2025-03-03 03:49:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 03:45:00' AND '2025-03-03 03:49:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 03:45:00' AND '2025-03-03 03:49:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:45:00' AS TIMESTAMP) AND CAST('2025-03-03 03:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,613 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,616 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 03:45:00, 2025-03-03 03:50:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,616 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,621 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,631 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,654 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 03:50:00, 2025-03-03 03:55:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,659 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,665 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:50:00' AS TIMESTAMP) AND CAST('2025-03-03 03:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,671 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 03:50:00' AND '2025-03-03 03:54:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 03:50:00' AND '2025-03-03 03:54:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 03:50:00' AND '2025-03-03 03:54:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 03:50:00' AND '2025-03-03 03:54:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:50:00' AS TIMESTAMP) AND CAST('2025-03-03 03:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,678 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,680 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 03:50:00, 2025-03-03 03:55:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,680 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,686 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,695 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,716 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 03:55:00, 2025-03-03 04:00:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,720 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,732 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:55:00' AS TIMESTAMP) AND CAST('2025-03-03 03:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,739 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 03:55:00' AND '2025-03-03 03:59:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 03:55:00' AND '2025-03-03 03:59:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 03:55:00' AND '2025-03-03 03:59:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 03:55:00' AND '2025-03-03 03:59:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 03:55:00' AS TIMESTAMP) AND CAST('2025-03-03 03:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,747 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,749 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 03:55:00, 2025-03-03 04:00:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,750 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,755 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,764 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,784 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 04:00:00, 2025-03-03 04:05:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,789 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,796 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:00:00' AS TIMESTAMP) AND CAST('2025-03-03 04:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,804 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 04:00:00' AND '2025-03-03 04:04:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 04:00:00' AND '2025-03-03 04:04:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 04:00:00' AND '2025-03-03 04:04:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 04:00:00' AND '2025-03-03 04:04:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:00:00' AS TIMESTAMP) AND CAST('2025-03-03 04:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,813 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,815 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 04:00:00, 2025-03-03 04:05:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,816 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,821 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,830 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,850 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 04:05:00, 2025-03-03 04:10:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,854 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,861 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:05:00' AS TIMESTAMP) AND CAST('2025-03-03 04:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,869 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 04:05:00' AND '2025-03-03 04:09:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 04:05:00' AND '2025-03-03 04:09:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 04:05:00' AND '2025-03-03 04:09:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 04:05:00' AND '2025-03-03 04:09:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:05:00' AS TIMESTAMP) AND CAST('2025-03-03 04:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,877 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,879 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 04:05:00, 2025-03-03 04:10:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,879 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,885 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,894 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,916 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 04:10:00, 2025-03-03 04:15:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,920 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,928 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:10:00' AS TIMESTAMP) AND CAST('2025-03-03 04:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,936 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 04:10:00' AND '2025-03-03 04:14:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 04:10:00' AND '2025-03-03 04:14:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 04:10:00' AND '2025-03-03 04:14:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 04:10:00' AND '2025-03-03 04:14:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:10:00' AS TIMESTAMP) AND CAST('2025-03-03 04:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:34,943 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:34,945 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 04:10:00, 2025-03-03 04:15:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:34,945 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:34,951 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:34,960 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:34,982 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 04:15:00, 2025-03-03 04:20:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:34,986 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:34,994 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:15:00' AS TIMESTAMP) AND CAST('2025-03-03 04:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,001 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 04:15:00' AND '2025-03-03 04:19:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 04:15:00' AND '2025-03-03 04:19:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 04:15:00' AND '2025-03-03 04:19:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 04:15:00' AND '2025-03-03 04:19:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:15:00' AS TIMESTAMP) AND CAST('2025-03-03 04:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,008 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,011 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 04:15:00, 2025-03-03 04:20:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,011 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,017 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,026 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,047 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 04:20:00, 2025-03-03 04:25:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,051 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,058 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:20:00' AS TIMESTAMP) AND CAST('2025-03-03 04:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,068 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 04:20:00' AND '2025-03-03 04:24:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 04:20:00' AND '2025-03-03 04:24:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 04:20:00' AND '2025-03-03 04:24:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 04:20:00' AND '2025-03-03 04:24:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:20:00' AS TIMESTAMP) AND CAST('2025-03-03 04:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,076 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,079 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 04:20:00, 2025-03-03 04:25:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,079 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,085 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,094 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,116 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 04:25:00, 2025-03-03 04:30:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,120 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,128 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:25:00' AS TIMESTAMP) AND CAST('2025-03-03 04:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,136 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 04:25:00' AND '2025-03-03 04:29:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 04:25:00' AND '2025-03-03 04:29:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 04:25:00' AND '2025-03-03 04:29:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 04:25:00' AND '2025-03-03 04:29:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:25:00' AS TIMESTAMP) AND CAST('2025-03-03 04:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,145 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,148 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 04:25:00, 2025-03-03 04:30:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,148 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,154 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,163 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,185 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 04:30:00, 2025-03-03 04:35:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,190 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,198 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:30:00' AS TIMESTAMP) AND CAST('2025-03-03 04:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,205 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 04:30:00' AND '2025-03-03 04:34:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 04:30:00' AND '2025-03-03 04:34:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 04:30:00' AND '2025-03-03 04:34:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 04:30:00' AND '2025-03-03 04:34:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:30:00' AS TIMESTAMP) AND CAST('2025-03-03 04:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,212 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,215 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 04:30:00, 2025-03-03 04:35:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,215 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,221 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,231 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,253 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 04:35:00, 2025-03-03 04:40:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,258 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,266 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:35:00' AS TIMESTAMP) AND CAST('2025-03-03 04:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,273 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 04:35:00' AND '2025-03-03 04:39:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 04:35:00' AND '2025-03-03 04:39:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 04:35:00' AND '2025-03-03 04:39:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 04:35:00' AND '2025-03-03 04:39:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:35:00' AS TIMESTAMP) AND CAST('2025-03-03 04:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,280 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,282 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 04:35:00, 2025-03-03 04:40:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,282 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,288 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,297 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,319 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 04:40:00, 2025-03-03 04:45:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,325 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,333 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:40:00' AS TIMESTAMP) AND CAST('2025-03-03 04:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,340 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 04:40:00' AND '2025-03-03 04:44:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 04:40:00' AND '2025-03-03 04:44:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 04:40:00' AND '2025-03-03 04:44:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 04:40:00' AND '2025-03-03 04:44:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:40:00' AS TIMESTAMP) AND CAST('2025-03-03 04:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,347 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,350 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 04:40:00, 2025-03-03 04:45:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,350 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,356 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,365 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,387 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 04:45:00, 2025-03-03 04:50:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,393 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,401 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:45:00' AS TIMESTAMP) AND CAST('2025-03-03 04:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,410 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 04:45:00' AND '2025-03-03 04:49:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 04:45:00' AND '2025-03-03 04:49:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 04:45:00' AND '2025-03-03 04:49:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 04:45:00' AND '2025-03-03 04:49:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:45:00' AS TIMESTAMP) AND CAST('2025-03-03 04:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,419 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,423 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 04:45:00, 2025-03-03 04:50:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,423 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,429 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,438 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,459 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 04:50:00, 2025-03-03 04:55:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,464 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,471 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:50:00' AS TIMESTAMP) AND CAST('2025-03-03 04:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,479 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 04:50:00' AND '2025-03-03 04:54:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 04:50:00' AND '2025-03-03 04:54:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 04:50:00' AND '2025-03-03 04:54:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 04:50:00' AND '2025-03-03 04:54:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:50:00' AS TIMESTAMP) AND CAST('2025-03-03 04:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,487 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,489 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 04:50:00, 2025-03-03 04:55:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,489 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,497 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,506 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,527 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 04:55:00, 2025-03-03 05:00:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,531 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,540 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:55:00' AS TIMESTAMP) AND CAST('2025-03-03 04:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,547 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 04:55:00' AND '2025-03-03 04:59:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 04:55:00' AND '2025-03-03 04:59:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 04:55:00' AND '2025-03-03 04:59:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 04:55:00' AND '2025-03-03 04:59:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 04:55:00' AS TIMESTAMP) AND CAST('2025-03-03 04:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,554 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,557 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 04:55:00, 2025-03-03 05:00:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,557 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,562 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,572 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,594 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 05:00:00, 2025-03-03 05:05:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,599 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,606 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:00:00' AS TIMESTAMP) AND CAST('2025-03-03 05:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,613 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 05:00:00' AND '2025-03-03 05:04:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 05:00:00' AND '2025-03-03 05:04:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 05:00:00' AND '2025-03-03 05:04:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 05:00:00' AND '2025-03-03 05:04:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:00:00' AS TIMESTAMP) AND CAST('2025-03-03 05:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,620 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,623 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 05:00:00, 2025-03-03 05:05:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,623 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,629 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,639 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,661 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 05:05:00, 2025-03-03 05:10:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,669 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,677 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:05:00' AS TIMESTAMP) AND CAST('2025-03-03 05:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,684 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 05:05:00' AND '2025-03-03 05:09:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 05:05:00' AND '2025-03-03 05:09:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 05:05:00' AND '2025-03-03 05:09:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 05:05:00' AND '2025-03-03 05:09:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:05:00' AS TIMESTAMP) AND CAST('2025-03-03 05:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,693 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,696 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 05:05:00, 2025-03-03 05:10:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,696 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,702 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,712 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,734 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 05:10:00, 2025-03-03 05:15:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,738 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,745 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:10:00' AS TIMESTAMP) AND CAST('2025-03-03 05:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,755 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 05:10:00' AND '2025-03-03 05:14:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 05:10:00' AND '2025-03-03 05:14:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 05:10:00' AND '2025-03-03 05:14:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 05:10:00' AND '2025-03-03 05:14:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:10:00' AS TIMESTAMP) AND CAST('2025-03-03 05:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,763 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,766 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 05:10:00, 2025-03-03 05:15:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,766 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,772 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,781 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,802 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 05:15:00, 2025-03-03 05:20:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,806 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,813 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:15:00' AS TIMESTAMP) AND CAST('2025-03-03 05:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,821 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 05:15:00' AND '2025-03-03 05:19:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 05:15:00' AND '2025-03-03 05:19:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 05:15:00' AND '2025-03-03 05:19:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 05:15:00' AND '2025-03-03 05:19:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:15:00' AS TIMESTAMP) AND CAST('2025-03-03 05:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,828 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,831 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 05:15:00, 2025-03-03 05:20:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,831 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,838 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,847 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,868 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 05:20:00, 2025-03-03 05:25:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,872 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,878 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:20:00' AS TIMESTAMP) AND CAST('2025-03-03 05:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,886 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 05:20:00' AND '2025-03-03 05:24:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 05:20:00' AND '2025-03-03 05:24:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 05:20:00' AND '2025-03-03 05:24:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 05:20:00' AND '2025-03-03 05:24:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:20:00' AS TIMESTAMP) AND CAST('2025-03-03 05:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,894 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,897 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 05:20:00, 2025-03-03 05:25:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,897 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,902 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,911 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:35,935 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 05:25:00, 2025-03-03 05:30:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:35,940 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:35,947 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:25:00' AS TIMESTAMP) AND CAST('2025-03-03 05:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,954 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 05:25:00' AND '2025-03-03 05:29:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 05:25:00' AND '2025-03-03 05:29:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 05:25:00' AND '2025-03-03 05:29:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 05:25:00' AND '2025-03-03 05:29:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:25:00' AS TIMESTAMP) AND CAST('2025-03-03 05:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:35,962 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:35,965 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 05:25:00, 2025-03-03 05:30:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:35,965 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:35,971 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:35,980 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,000 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 05:30:00, 2025-03-03 05:35:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,005 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,013 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:30:00' AS TIMESTAMP) AND CAST('2025-03-03 05:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,020 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 05:30:00' AND '2025-03-03 05:34:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 05:30:00' AND '2025-03-03 05:34:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 05:30:00' AND '2025-03-03 05:34:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 05:30:00' AND '2025-03-03 05:34:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:30:00' AS TIMESTAMP) AND CAST('2025-03-03 05:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,028 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,031 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 05:30:00, 2025-03-03 05:35:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,031 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,036 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,045 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,065 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 05:35:00, 2025-03-03 05:40:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,070 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,077 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:35:00' AS TIMESTAMP) AND CAST('2025-03-03 05:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,087 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 05:35:00' AND '2025-03-03 05:39:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 05:35:00' AND '2025-03-03 05:39:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 05:35:00' AND '2025-03-03 05:39:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 05:35:00' AND '2025-03-03 05:39:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:35:00' AS TIMESTAMP) AND CAST('2025-03-03 05:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,095 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,097 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 05:35:00, 2025-03-03 05:40:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,097 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,103 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,112 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,132 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 05:40:00, 2025-03-03 05:45:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,137 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,144 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:40:00' AS TIMESTAMP) AND CAST('2025-03-03 05:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,152 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 05:40:00' AND '2025-03-03 05:44:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 05:40:00' AND '2025-03-03 05:44:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 05:40:00' AND '2025-03-03 05:44:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 05:40:00' AND '2025-03-03 05:44:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:40:00' AS TIMESTAMP) AND CAST('2025-03-03 05:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,159 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,162 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 05:40:00, 2025-03-03 05:45:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,162 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,167 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,176 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,198 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 05:45:00, 2025-03-03 05:50:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,203 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,210 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:45:00' AS TIMESTAMP) AND CAST('2025-03-03 05:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,218 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 05:45:00' AND '2025-03-03 05:49:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 05:45:00' AND '2025-03-03 05:49:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 05:45:00' AND '2025-03-03 05:49:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 05:45:00' AND '2025-03-03 05:49:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:45:00' AS TIMESTAMP) AND CAST('2025-03-03 05:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,226 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,229 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 05:45:00, 2025-03-03 05:50:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,229 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,234 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,244 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,266 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 05:50:00, 2025-03-03 05:55:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,271 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,278 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:50:00' AS TIMESTAMP) AND CAST('2025-03-03 05:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,286 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 05:50:00' AND '2025-03-03 05:54:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 05:50:00' AND '2025-03-03 05:54:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 05:50:00' AND '2025-03-03 05:54:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 05:50:00' AND '2025-03-03 05:54:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:50:00' AS TIMESTAMP) AND CAST('2025-03-03 05:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,294 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,297 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 05:50:00, 2025-03-03 05:55:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,297 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,302 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,312 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,333 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 05:55:00, 2025-03-03 06:00:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,337 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,346 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:55:00' AS TIMESTAMP) AND CAST('2025-03-03 05:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,357 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 05:55:00' AND '2025-03-03 05:59:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 05:55:00' AND '2025-03-03 05:59:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 05:55:00' AND '2025-03-03 05:59:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 05:55:00' AND '2025-03-03 05:59:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 05:55:00' AS TIMESTAMP) AND CAST('2025-03-03 05:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,365 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,369 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 05:55:00, 2025-03-03 06:00:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,369 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,374 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,385 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,406 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 06:00:00, 2025-03-03 06:05:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,410 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,419 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:00:00' AS TIMESTAMP) AND CAST('2025-03-03 06:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,426 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 06:00:00' AND '2025-03-03 06:04:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 06:00:00' AND '2025-03-03 06:04:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 06:00:00' AND '2025-03-03 06:04:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 06:00:00' AND '2025-03-03 06:04:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:00:00' AS TIMESTAMP) AND CAST('2025-03-03 06:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,435 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,438 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 06:00:00, 2025-03-03 06:05:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,438 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,444 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,454 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,474 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 06:05:00, 2025-03-03 06:10:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,480 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,488 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:05:00' AS TIMESTAMP) AND CAST('2025-03-03 06:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,495 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 06:05:00' AND '2025-03-03 06:09:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 06:05:00' AND '2025-03-03 06:09:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 06:05:00' AND '2025-03-03 06:09:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 06:05:00' AND '2025-03-03 06:09:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:05:00' AS TIMESTAMP) AND CAST('2025-03-03 06:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,503 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,508 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 06:05:00, 2025-03-03 06:10:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,508 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,513 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,523 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,545 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 06:10:00, 2025-03-03 06:15:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,550 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,556 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:10:00' AS TIMESTAMP) AND CAST('2025-03-03 06:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,564 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 06:10:00' AND '2025-03-03 06:14:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 06:10:00' AND '2025-03-03 06:14:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 06:10:00' AND '2025-03-03 06:14:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 06:10:00' AND '2025-03-03 06:14:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:10:00' AS TIMESTAMP) AND CAST('2025-03-03 06:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,572 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,574 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 06:10:00, 2025-03-03 06:15:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,575 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,580 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,589 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,610 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 06:15:00, 2025-03-03 06:20:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,620 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,628 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:15:00' AS TIMESTAMP) AND CAST('2025-03-03 06:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,635 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 06:15:00' AND '2025-03-03 06:19:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 06:15:00' AND '2025-03-03 06:19:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 06:15:00' AND '2025-03-03 06:19:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 06:15:00' AND '2025-03-03 06:19:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:15:00' AS TIMESTAMP) AND CAST('2025-03-03 06:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,647 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,650 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 06:15:00, 2025-03-03 06:20:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,650 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,656 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,665 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,680 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:46:36,689 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 06:20:00, 2025-03-03 06:25:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,694 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,695 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (2): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:46:36,696 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12defb450>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:46:36,701 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:20:00' AS TIMESTAMP) AND CAST('2025-03-03 06:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,711 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 06:20:00' AND '2025-03-03 06:24:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 06:20:00' AND '2025-03-03 06:24:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 06:20:00' AND '2025-03-03 06:24:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 06:20:00' AND '2025-03-03 06:24:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:20:00' AS TIMESTAMP) AND CAST('2025-03-03 06:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,720 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,723 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 06:20:00, 2025-03-03 06:25:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,723 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,728 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,738 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,758 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 06:25:00, 2025-03-03 06:30:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,762 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,770 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:25:00' AS TIMESTAMP) AND CAST('2025-03-03 06:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,778 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 06:25:00' AND '2025-03-03 06:29:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 06:25:00' AND '2025-03-03 06:29:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 06:25:00' AND '2025-03-03 06:29:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 06:25:00' AND '2025-03-03 06:29:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:25:00' AS TIMESTAMP) AND CAST('2025-03-03 06:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,786 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,790 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 06:25:00, 2025-03-03 06:30:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,790 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,797 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,807 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,827 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 06:30:00, 2025-03-03 06:35:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,831 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,837 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:30:00' AS TIMESTAMP) AND CAST('2025-03-03 06:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,846 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 06:30:00' AND '2025-03-03 06:34:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 06:30:00' AND '2025-03-03 06:34:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 06:30:00' AND '2025-03-03 06:34:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 06:30:00' AND '2025-03-03 06:34:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:30:00' AS TIMESTAMP) AND CAST('2025-03-03 06:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,853 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,856 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 06:30:00, 2025-03-03 06:35:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,856 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,861 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,870 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,893 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 06:35:00, 2025-03-03 06:40:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,898 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,905 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:35:00' AS TIMESTAMP) AND CAST('2025-03-03 06:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,913 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 06:35:00' AND '2025-03-03 06:39:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 06:35:00' AND '2025-03-03 06:39:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 06:35:00' AND '2025-03-03 06:39:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 06:35:00' AND '2025-03-03 06:39:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:35:00' AS TIMESTAMP) AND CAST('2025-03-03 06:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,920 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,923 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 06:35:00, 2025-03-03 06:40:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,923 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,929 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:36,938 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:36,959 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 06:40:00, 2025-03-03 06:45:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:36,965 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:36,973 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:40:00' AS TIMESTAMP) AND CAST('2025-03-03 06:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,980 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 06:40:00' AND '2025-03-03 06:44:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 06:40:00' AND '2025-03-03 06:44:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 06:40:00' AND '2025-03-03 06:44:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 06:40:00' AND '2025-03-03 06:44:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:40:00' AS TIMESTAMP) AND CAST('2025-03-03 06:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:36,987 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:36,990 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 06:40:00, 2025-03-03 06:45:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:36,990 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:36,996 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,005 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,026 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 06:45:00, 2025-03-03 06:50:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,030 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,038 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:45:00' AS TIMESTAMP) AND CAST('2025-03-03 06:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,047 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 06:45:00' AND '2025-03-03 06:49:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 06:45:00' AND '2025-03-03 06:49:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 06:45:00' AND '2025-03-03 06:49:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 06:45:00' AND '2025-03-03 06:49:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:45:00' AS TIMESTAMP) AND CAST('2025-03-03 06:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,055 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,058 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 06:45:00, 2025-03-03 06:50:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,058 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,064 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,074 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,097 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 06:50:00, 2025-03-03 06:55:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,102 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,111 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:50:00' AS TIMESTAMP) AND CAST('2025-03-03 06:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,118 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 06:50:00' AND '2025-03-03 06:54:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 06:50:00' AND '2025-03-03 06:54:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 06:50:00' AND '2025-03-03 06:54:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 06:50:00' AND '2025-03-03 06:54:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:50:00' AS TIMESTAMP) AND CAST('2025-03-03 06:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,127 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,131 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 06:50:00, 2025-03-03 06:55:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,131 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,139 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,148 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,169 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 06:55:00, 2025-03-03 07:00:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,173 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,181 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:55:00' AS TIMESTAMP) AND CAST('2025-03-03 06:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,189 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 06:55:00' AND '2025-03-03 06:59:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 06:55:00' AND '2025-03-03 06:59:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 06:55:00' AND '2025-03-03 06:59:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 06:55:00' AND '2025-03-03 06:59:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 06:55:00' AS TIMESTAMP) AND CAST('2025-03-03 06:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,197 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,200 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 06:55:00, 2025-03-03 07:00:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,200 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,206 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,215 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,238 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 07:00:00, 2025-03-03 07:05:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,243 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,251 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:00:00' AS TIMESTAMP) AND CAST('2025-03-03 07:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,258 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 07:00:00' AND '2025-03-03 07:04:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 07:00:00' AND '2025-03-03 07:04:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 07:00:00' AND '2025-03-03 07:04:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 07:00:00' AND '2025-03-03 07:04:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:00:00' AS TIMESTAMP) AND CAST('2025-03-03 07:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,265 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,268 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 07:00:00, 2025-03-03 07:05:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,268 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,274 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,283 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,304 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 07:05:00, 2025-03-03 07:10:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,309 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,319 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:05:00' AS TIMESTAMP) AND CAST('2025-03-03 07:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,326 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 07:05:00' AND '2025-03-03 07:09:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 07:05:00' AND '2025-03-03 07:09:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 07:05:00' AND '2025-03-03 07:09:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 07:05:00' AND '2025-03-03 07:09:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:05:00' AS TIMESTAMP) AND CAST('2025-03-03 07:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,333 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,336 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 07:05:00, 2025-03-03 07:10:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,337 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,342 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,352 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,375 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 07:10:00, 2025-03-03 07:15:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,380 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,390 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:10:00' AS TIMESTAMP) AND CAST('2025-03-03 07:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,400 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 07:10:00' AND '2025-03-03 07:14:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 07:10:00' AND '2025-03-03 07:14:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 07:10:00' AND '2025-03-03 07:14:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 07:10:00' AND '2025-03-03 07:14:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:10:00' AS TIMESTAMP) AND CAST('2025-03-03 07:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,409 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,414 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 07:10:00, 2025-03-03 07:15:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,414 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,419 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,429 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,450 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 07:15:00, 2025-03-03 07:20:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,454 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,463 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:15:00' AS TIMESTAMP) AND CAST('2025-03-03 07:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,471 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 07:15:00' AND '2025-03-03 07:19:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 07:15:00' AND '2025-03-03 07:19:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 07:15:00' AND '2025-03-03 07:19:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 07:15:00' AND '2025-03-03 07:19:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:15:00' AS TIMESTAMP) AND CAST('2025-03-03 07:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,478 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,481 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 07:15:00, 2025-03-03 07:20:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,481 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,486 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,497 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,520 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 07:20:00, 2025-03-03 07:25:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,524 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,532 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:20:00' AS TIMESTAMP) AND CAST('2025-03-03 07:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,539 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 07:20:00' AND '2025-03-03 07:24:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 07:20:00' AND '2025-03-03 07:24:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 07:20:00' AND '2025-03-03 07:24:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 07:20:00' AND '2025-03-03 07:24:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:20:00' AS TIMESTAMP) AND CAST('2025-03-03 07:24:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,546 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,549 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 07:20:00, 2025-03-03 07:25:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,550 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,555 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,564 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,587 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 07:25:00, 2025-03-03 07:30:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,593 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,600 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:25:00' AS TIMESTAMP) AND CAST('2025-03-03 07:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,607 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 07:25:00' AND '2025-03-03 07:29:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 07:25:00' AND '2025-03-03 07:29:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 07:25:00' AND '2025-03-03 07:29:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 07:25:00' AND '2025-03-03 07:29:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:25:00' AS TIMESTAMP) AND CAST('2025-03-03 07:29:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,613 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,616 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 07:25:00, 2025-03-03 07:30:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,616 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,622 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,631 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,653 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 07:30:00, 2025-03-03 07:35:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,660 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,669 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:30:00' AS TIMESTAMP) AND CAST('2025-03-03 07:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,678 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 07:30:00' AND '2025-03-03 07:34:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 07:30:00' AND '2025-03-03 07:34:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 07:30:00' AND '2025-03-03 07:34:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 07:30:00' AND '2025-03-03 07:34:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:30:00' AS TIMESTAMP) AND CAST('2025-03-03 07:34:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,687 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,690 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 07:30:00, 2025-03-03 07:35:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,690 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,696 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,706 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,726 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 07:35:00, 2025-03-03 07:40:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,730 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,738 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:35:00' AS TIMESTAMP) AND CAST('2025-03-03 07:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,745 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 07:35:00' AND '2025-03-03 07:39:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 07:35:00' AND '2025-03-03 07:39:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 07:35:00' AND '2025-03-03 07:39:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 07:35:00' AND '2025-03-03 07:39:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:35:00' AS TIMESTAMP) AND CAST('2025-03-03 07:39:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,753 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,756 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 07:35:00, 2025-03-03 07:40:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,756 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,762 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,771 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,793 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 07:40:00, 2025-03-03 07:45:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,797 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,805 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:40:00' AS TIMESTAMP) AND CAST('2025-03-03 07:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,812 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 07:40:00' AND '2025-03-03 07:44:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 07:40:00' AND '2025-03-03 07:44:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 07:40:00' AND '2025-03-03 07:44:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 07:40:00' AND '2025-03-03 07:44:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:40:00' AS TIMESTAMP) AND CAST('2025-03-03 07:44:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,819 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,821 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 07:40:00, 2025-03-03 07:45:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,821 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,827 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,835 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,856 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 07:45:00, 2025-03-03 07:50:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,860 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,866 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:45:00' AS TIMESTAMP) AND CAST('2025-03-03 07:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,872 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 07:45:00' AND '2025-03-03 07:49:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 07:45:00' AND '2025-03-03 07:49:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 07:45:00' AND '2025-03-03 07:49:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 07:45:00' AND '2025-03-03 07:49:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:45:00' AS TIMESTAMP) AND CAST('2025-03-03 07:49:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,878 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,881 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 07:45:00, 2025-03-03 07:50:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,881 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,887 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,895 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,915 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 07:50:00, 2025-03-03 07:55:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,920 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,927 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:50:00' AS TIMESTAMP) AND CAST('2025-03-03 07:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,933 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 07:50:00' AND '2025-03-03 07:54:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 07:50:00' AND '2025-03-03 07:54:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 07:50:00' AND '2025-03-03 07:54:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 07:50:00' AND '2025-03-03 07:54:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:50:00' AS TIMESTAMP) AND CAST('2025-03-03 07:54:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,940 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:37,942 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 07:50:00, 2025-03-03 07:55:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:37,942 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:37,948 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:37,957 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:37,976 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 07:55:00, 2025-03-03 08:00:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:37,980 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:37,987 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:55:00' AS TIMESTAMP) AND CAST('2025-03-03 07:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:37,994 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 07:55:00' AND '2025-03-03 07:59:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 07:55:00' AND '2025-03-03 07:59:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 07:55:00' AND '2025-03-03 07:59:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 07:55:00' AND '2025-03-03 07:59:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 07:55:00' AS TIMESTAMP) AND CAST('2025-03-03 07:59:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:38,001 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:38,004 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 07:55:00, 2025-03-03 08:00:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:38,004 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:38,010 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:38,022 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:38,046 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 08:00:00, 2025-03-03 08:05:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:38,051 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:38,059 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 08:00:00' AS TIMESTAMP) AND CAST('2025-03-03 08:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:38,066 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 08:00:00' AND '2025-03-03 08:04:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 08:00:00' AND '2025-03-03 08:04:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 08:00:00' AND '2025-03-03 08:04:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 08:00:00' AND '2025-03-03 08:04:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 08:00:00' AS TIMESTAMP) AND CAST('2025-03-03 08:04:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:38,075 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:38,079 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 08:00:00, 2025-03-03 08:05:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:38,079 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:38,092 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:38,106 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:38,131 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 08:05:00, 2025-03-03 08:10:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:38,136 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:38,144 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 08:05:00' AS TIMESTAMP) AND CAST('2025-03-03 08:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:38,156 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 08:05:00' AND '2025-03-03 08:09:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 08:05:00' AND '2025-03-03 08:09:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 08:05:00' AND '2025-03-03 08:09:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 08:05:00' AND '2025-03-03 08:09:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 08:05:00' AS TIMESTAMP) AND CAST('2025-03-03 08:09:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:38,167 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:38,173 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 08:05:00, 2025-03-03 08:10:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:38,173 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:38,180 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:38,193 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:38,218 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 08:10:00, 2025-03-03 08:15:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:38,223 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:38,230 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 08:10:00' AS TIMESTAMP) AND CAST('2025-03-03 08:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:38,240 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 08:10:00' AND '2025-03-03 08:14:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 08:10:00' AND '2025-03-03 08:14:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 08:10:00' AND '2025-03-03 08:14:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 08:10:00' AND '2025-03-03 08:14:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 08:10:00' AS TIMESTAMP) AND CAST('2025-03-03 08:14:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:38,249 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Pinging the database to check the connection (base.py:2070)
2025-05-13 06:46:38,253 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.facade - INFO - Adding interval (2025-03-03 08:10:00, 2025-03-03 08:15:00) for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (facade.py:622)
2025-05-13 06:46:38,253 - ThreadPoolExecutor-3_1 - sqlmesh.core.state_sync.db.interval - INFO - Pushing intervals for snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (interval.py:210)
2025-05-13 06:46:38,261 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - DEBUG - Executing SQL: INSERT INTO "sqlmesh"."_intervals" ("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") SELECT CAST("id" AS TEXT) AS "id", CAST("created_ts" AS BIGINT) AS "created_ts", CAST("name" AS TEXT) AS "name", CAST("identifier" AS TEXT) AS "identifier", CAST("version" AS TEXT) AS "version", CAST("dev_version" AS TEXT) AS "dev_version", CAST("start_ts" AS BIGINT) AS "start_ts", CAST("end_ts" AS BIGINT) AS "end_ts", CAST("is_dev" AS BOOLEAN) AS "is_dev", CAST("is_removed" AS BOOLEAN) AS "is_removed", CAST("is_compacted" AS BOOLEAN) AS "is_compacted", CAST("is_pending_restatement" AS BOOLEAN) AS "is_pending_restatement" FROM (VALUES "<REDACTED VALUES>") AS "t"("id", "created_ts", "name", "identifier", "version", "dev_version", "start_ts", "end_ts", "is_dev", "is_removed", "is_compacted", "is_pending_restatement") (base.py:2152)
2025-05-13 06:46:38,272 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Evaluating snapshot SnapshotId<"tradesdb"."sqlmesh_example"."incremental_model": 2011567800> (evaluator.py:635)
2025-05-13 06:46:38,293 - ThreadPoolExecutor-3_1 - sqlmesh.core.snapshot.evaluator - INFO - Inserting batch (2025-03-03 08:15:00, 2025-03-03 08:20:00) into tradesdb.sqlmesh__sqlmesh_example.sqlmesh_example__incremental_model__4074472748' (evaluator.py:689)
2025-05-13 06:46:38,300 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: SELECT "attname" AS "column_name", "pg_catalog".format_type("atttypid", "atttypmod") AS "data_type" FROM "pg_catalog"."pg_attribute" JOIN "pg_catalog"."pg_class" ON "pg_class"."oid" = "attrelid" JOIN "pg_catalog"."pg_namespace" ON "pg_namespace"."oid" = "relnamespace" WHERE ("attnum" > 0 AND NOT "attisdropped" AND "relname" = 'sqlmesh_example__incremental_model__4074472748') AND "nspname" = 'sqlmesh__sqlmesh_example' (base.py:2152)
2025-05-13 06:46:38,309 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: DELETE FROM "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 08:15:00' AS TIMESTAMP) AND CAST('2025-03-03 08:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:38,320 - ThreadPoolExecutor-3_1 - sqlmesh.core.engine_adapter.base - INFO - Executing SQL: INSERT INTO "sqlmesh__sqlmesh_example"."sqlmesh_example__incremental_model__4074472748" ("source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id") SELECT "source", "db_timestamp", "trade_id", "exchange_trade_id", "order_id", "exchange_order_id" FROM (SELECT 'SRC1' AS "source", "trade"."db_timestamp" AS "db_timestamp", "trade"."trade_id" AS "trade_id", "trade"."exchange_trade_id" AS "exchange_trade_id", "ord"."order_id" AS "order_id", "ord"."exchange_order_id" AS "exchange_order_id" FROM (SELECT * FROM (SELECT * FROM "tradesdb"."schema1"."trd_hist" AS "th" WHERE "th"."trade_version" = (SELECT MAX("trade_version") FROM "tradesdb"."schema1"."trd_hist" AS "th1" WHERE "th"."trade_id" = "th1"."trade_id" AND "th"."trade_part_index" = "th1"."trade_part_index") AND "th"."db_timestamp" BETWEEN '2025-03-03 08:15:00' AND '2025-03-03 08:19:59.999999') AS "maxversion" WHERE "maxversion"."db_timestamp" = (SELECT MAX("db_timestamp") FROM "tradesdb"."schema1"."trd_hist" AS "th2" WHERE "th2"."db_timestamp" BETWEEN '2025-03-03 08:15:00' AND '2025-03-03 08:19:59.999999' AND "th2"."trade_version" = "maxversion"."trade_version" AND "th2"."trade_id" = "maxversion"."trade_id" AND "th2"."trade_date_utc" = "maxversion"."trade_date_utc")) AS "trade" LEFT JOIN (SELECT * FROM "tradesdb"."schema1"."ord_hist" AS "oh" WHERE "oh"."db_timestamp" = (SELECT MAX("oh1"."db_timestamp") FROM "tradesdb"."schema1"."ord_hist" AS "oh1" WHERE "oh1"."order_id" = "oh"."order_id") AND "oh"."db_timestamp" BETWEEN '2025-03-03 08:15:00' AND '2025-03-03 08:19:59.999999') AS "ord" ON "trade"."order_id" = "ord"."order_id" WHERE "trade"."db_timestamp" BETWEEN '2025-03-03 08:15:00' AND '2025-03-03 08:19:59.999999') AS "_subquery" WHERE "db_timestamp" BETWEEN CAST('2025-03-03 08:15:00' AS TIMESTAMP) AND CAST('2025-03-03 08:19:59.999999' AS TIMESTAMP) (base.py:2152)
2025-05-13 06:46:41,704 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:46:41,735 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (3): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:46:41,748 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e0e3450>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:46:46,757 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:46:46,759 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (4): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:46:46,760 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x129ee5150>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:46:51,760 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:46:51,762 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (5): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:46:51,763 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x129ee6b50>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:46:56,763 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:46:56,765 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (6): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:46:56,766 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x129ee7110>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:47:01,767 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:47:01,769 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (7): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:47:01,770 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e588890>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:47:06,770 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:47:06,773 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (8): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:47:06,774 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e58a310>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:47:11,775 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:47:11,777 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (9): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:47:11,778 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e58b990>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:47:16,783 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:47:16,785 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (10): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:47:16,786 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e571690>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:47:21,787 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:47:21,789 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (11): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:47:21,790 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e573310>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:47:26,791 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:47:26,793 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (12): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:47:26,794 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e570a10>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:47:31,799 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:47:31,801 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (13): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:47:31,802 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e58ae90>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:47:36,806 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:47:36,808 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (14): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:47:36,809 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e58b750>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:47:41,809 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:47:41,811 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (15): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:47:41,812 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e58b050>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:47:46,813 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:47:46,815 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (16): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:47:46,816 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x129ee71d0>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:47:51,821 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:47:51,823 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (17): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:47:51,824 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x129ee72d0>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:47:56,829 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:47:56,831 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (18): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:47:56,832 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x129ee5310>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:48:01,834 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:48:01,836 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (19): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:48:01,838 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e573050>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:48:06,841 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:48:06,843 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (20): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:48:06,844 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e570dd0>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:48:11,849 - event-emitter - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:48:11,851 - event-emitter - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (21): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:48:11,853 - event-emitter - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e569750>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
2025-05-13 06:48:16,616 - MainThread - root - INFO - Shutting down the event dispatcher (dispatcher.py:159)
2025-05-13 06:48:16,616 - MainThread - sqlmesh.core.analytics.dispatcher - DEBUG - Emitting 4 events (dispatcher.py:134)
2025-05-13 06:48:16,618 - MainThread - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (22): analytics.tobikodata.com:443 (connectionpool.py:1049)
2025-05-13 06:48:16,619 - MainThread - sqlmesh.core.analytics.dispatcher - INFO - Failed to emit events: HTTPSConnectionPool(host='analytics.tobikodata.com', port=443): Max retries exceeded with url: /v1/sqlmesh/ (Caused by NameResolutionError("<urllib3.connection.HTTPSConnection object at 0x12e571190>: Failed to resolve 'analytics.tobikodata.com' ([Errno 8] nodename nor servname provided, or not known)")) (dispatcher.py:138)
